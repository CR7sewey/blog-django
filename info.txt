1.
Vou usar docker, a pasta raiz nao vai ser a raiz do meu orojeto django
Vai ter todas as configuraçoes que envolvem o docker!
O ambiente virtual em si não é usado depois, é so para desenvolvimento!!

a pasta djangoapp é a raiz em si do projeto!!
criar nesta pasta um projeto - django-admin startproject project .
para correr server - python djangoapp/manage.py runserver

2.
requirements.txt - usado dentro do container docker para instalar todas as coisas usadas no projeto!
dockerignore - nao por files nao necessarios no container

3.
criar .dotenv com variaveis de ambiente!
generate secret key:
python -c  "import string as s; from secrets import SystemRandom as SR;print(''.join(SR().choices(s.ascii_letters+s.digits+s.punctuation,k=64)))
alterar coisas settings (env, media, url)

4. 
docker file - informar qual imagem vamos usar la dentro!
alpine - versao do linux!! utilizada em imagens do docker - gogoleg: https://hub.docker.com/
o commands.sh vai ser executado toda a vez que eu subir a minha imagem docker!

5.
docker compose
o docker file cria a nossa imagem com a configuracao que colocamos, imagem essa que é o django!
Queremos por a base de dados (postgresql) dentro do docker
Entao crio um container do django com postgres no compose ( e com outros containers - services
2 containers - dajngoapp e psql)
o djangoapp depende do psql

de seguida criar docker compose - docker-compose up --build (baixa imagens e builds e ambiente virtual)
to delete - docker rm (3 first leters of container id)
to deleter image - docker image rm id_image
NOTA: se alterar docker compose ou file ou dotenv temos de buildar de novo
para subir aplicacoa - docker compose up ou docker compose up -d (para nao ver info)
para baixar - docker compose down

6.
FORA DO CONATINER
Versao do python: docker-compose run --rm djangoapp python -V
docker-compose run --rm djangoapp pwd
docker-compose run --rm djangoapp python manage.py makemigrations
use shell: docker-compose run --rm djangoapp /bin/sh -c '__comando__' (comando linux!)
use shell: docker-compose run --rm djangoapp /bin/sh -c 'echo $SECRET_KEY'

apos mudancas feitas, para correr p ex: docker-compose run djangoapp runserver.sh
assim pudemos executar as linhas de comandos que queremso!!
Nota: qq coisa mudada buildar pq pode nao estar na image!!

7-
to create super user - docker-compose run --rm djangoapp python manage.py createsuperuser
to create app - docker-compose run --rm djangoapp python manage.py startapp blog
create static and templates floders!! na app pq queremos mandar para o container!

8- ir vendo commits

9-
criar novo app que tem as configuracoes do site!
e permite a um admin na area de aministrador configurar o site!

10-
Setup para usuario mudar cenas na pagina

11-
relacao entre menu link e sitesetup - one to many (um site para varios menulink)

12 - context processor!
Para injetar valores em todos os templates sem ter de ser pelo contxto da view!
para isso editar settings com context processor do sitesetup
(semelhante a aceder a user (request.user))

13 - image 
a cena é como estmos a usar docker, queremos que tudo suba a partir do requirements.txt
nao basta fazer pip install - por no requirements a versao do pip
temos de fazer build - faz instalacao e migracoes logo!